import cv2
import numpy as np

def compute_optical_flow(video_path):
    cap = cv2.VideoCapture(video_path)

    if not cap.isOpened():
        print("Error: Could not open video.")
        return

    # Read the first frame and convert it to grayscale
    ret, prev_frame = cap.read()
    prev_gray = cv2.cvtColor(prev_frame, cv2.COLOR_BGR2GRAY)

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break  # Stop when the video ends

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # Compute optical flow using the Farneback method
        flow = cv2.calcOpticalFlowFarneback(prev_gray, gray, None, 0.5, 3, 15, 3, 5, 1.2, 0)

        # Convert flow to polar coordinates (magnitude and angle)
        magnitude, angle = cv2.cartToPolar(flow[..., 0], flow[..., 1])

        # Create HSV image to visualize flow
        hsv = np.zeros_like(frame)
        hsv[..., 1] = 255  # Saturation is set to maximum
        hsv[..., 0] = angle * 180 / np.pi / 2  # Hue corresponds to direction
        hsv[..., 2] = cv2.normalize(magnitude, None, 0, 255, cv2.NORM_MINMAX)  # Brightness is magnitude

        # Convert HSV to BGR (for display)
        bgr = cv2.cvtColor(hsv, cv2.COLOR_HSV2BGR)

        # Display the optical flow result
        cv2.imshow("Optical Flow", bgr)

        # Update previous frame for next calculation
        prev_gray = gray

        # Exit when 'q' is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()

# Run the function
if __name__ == "__main__":
    compute_optical_flow("sample_video.mp4")
